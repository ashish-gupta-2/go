// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "ashish.com/m/pkg/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEmployeeStore is a mock of EmployeeStore interface
type MockEmployeeStore struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeStoreMockRecorder
}

// MockEmployeeStoreMockRecorder is the mock recorder for MockEmployeeStore
type MockEmployeeStoreMockRecorder struct {
	mock *MockEmployeeStore
}

// NewMockEmployeeStore creates a new mock instance
func NewMockEmployeeStore(ctrl *gomock.Controller) *MockEmployeeStore {
	mock := &MockEmployeeStore{ctrl: ctrl}
	mock.recorder = &MockEmployeeStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmployeeStore) EXPECT() *MockEmployeeStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockEmployeeStore) Get(ctx context.Context, uid string) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uid)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockEmployeeStoreMockRecorder) Get(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployeeStore)(nil).Get), ctx, uid)
}

// Update mocks base method
func (m *MockEmployeeStore) Update(ctx context.Context, uid string, updates models.Employee, fields ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, uid, updates}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockEmployeeStoreMockRecorder) Update(ctx, uid, updates interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, uid, updates}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmployeeStore)(nil).Update), varargs...)
}

// Create mocks base method
func (m *MockEmployeeStore) Create(ctx context.Context, employee models.Employee) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, employee)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockEmployeeStoreMockRecorder) Create(ctx, employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmployeeStore)(nil).Create), ctx, employee)
}

// MockPersonStore is a mock of PersonStore interface
type MockPersonStore struct {
	ctrl     *gomock.Controller
	recorder *MockPersonStoreMockRecorder
}

// MockPersonStoreMockRecorder is the mock recorder for MockPersonStore
type MockPersonStoreMockRecorder struct {
	mock *MockPersonStore
}

// NewMockPersonStore creates a new mock instance
func NewMockPersonStore(ctrl *gomock.Controller) *MockPersonStore {
	mock := &MockPersonStore{ctrl: ctrl}
	mock.recorder = &MockPersonStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersonStore) EXPECT() *MockPersonStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockPersonStore) Get(ctx context.Context, uid string) (*models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uid)
	ret0, _ := ret[0].(*models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPersonStoreMockRecorder) Get(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersonStore)(nil).Get), ctx, uid)
}

// Update mocks base method
func (m *MockPersonStore) Update(ctx context.Context, uid string, updates models.Person, fields ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, uid, updates}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPersonStoreMockRecorder) Update(ctx, uid, updates interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, uid, updates}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersonStore)(nil).Update), varargs...)
}

// Create mocks base method
func (m *MockPersonStore) Create(ctx context.Context, person models.Person) (*models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, person)
	ret0, _ := ret[0].(*models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPersonStoreMockRecorder) Create(ctx, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersonStore)(nil).Create), ctx, person)
}
